filter(Year == 2022)
id_2022 <- dat_2022 %>%
select(id)
list_2022 <- unique(c(t(id_2022)))
plotStormTracks(list_2022)
storms <- c("AL122005", "AL182012", "AL092017", "AL092022")
hurdat$id %in% storms
subset <- hurdat[hurdat$id %in% storms, ]
subset <- subset[subset$recordID == "L", ]
View(subset)
subset <- hurdat[hurdat$id %in% storms, ]
View(subset)
subset$recordID
subset <- subset[subset$recordID == " L", ]
View(subset)
for (i in length(storms)){
storm <- storms[i]
subset <- hurdat[hurdat$id == storm, ]
#while we can use our function, we can use the record identifier for convenience
#our function only tells us if the storm did or did not make, not when it did
subset <- subset[subset$recordID == " L", ]
#now we can find the row of the max wind speed that made landfall
row <- subset[subset$maxWind == max(subset$maxWind), ]
plotStorm(row)
}
#create a storm vector of all the storms id
storms <- c("AL122005", "AL182012", "AL092017", "AL092022")
for (i in length(storms)){
storm <- storms[i]
subset <- hurdat[hurdat$id == storm, ]
#while we can use our function, we can use the record identifier for convenience
#our function only tells us if the storm did or did not make, not when it did
subset <- subset[subset$recordID == " L", ]
#now we can find the row of the max wind speed that made landfall
row <- subset[subset$maxWind == max(subset$maxWind), ]
plotStorm(row)
}
#create a storm vector of all the storms id
storms <- c("AL122005", "AL182012", "AL092017", "AL092022")
for (i in length(storms)){
storm <- storms[i]
subset <- hurdat[hurdat$id == storm, ]
#while we can use our function, we can use the record identifier for convenience
#our function only tells us if the storm did or did not make, not when it did
subset <- subset[subset$recordID == " L", ]
#now we can find the row of the max wind speed that made landfall
row <- subset[subset$maxWind == max(subset$maxWind), ]
print(plotStorm(row))
}
library(tropCyclone)
#create a storm vector of all the storms id
storms <- c("AL122005", "AL182012", "AL092017", "AL092022")
for (i in length(storms)){
storm <- storms[i]
subset <- hurdat[hurdat$id == storm, ]
#while we can use our function, we can use the record identifier for convenience
#our function only tells us if the storm did or did not make, not when it did
subset <- subset[subset$recordID == " L", ]
#now we can find the row of the max wind speed that made landfall
row <- subset[subset$maxWind == max(subset$maxWind), ]
print(plotStorm(row))
}
library(tropCyclone)
library(randomcoloR)
library(tidyverse)
library(ggplot2)
library(maps)
library(sp)
library(mapdata)
data("hurdat")
for (i in length(storms)){
storm <- storms[i]
subset <- hurdat[hurdat$id == storm, ]
#while we can use our function, we can use the record identifier for convenience
#our function only tells us if the storm did or did not make, not when it did
subset <- subset[subset$recordID == " L", ]
#now we can find the row of the max wind speed that made landfall
row <- subset[subset$maxWind == max(subset$maxWind), ]
print(plotStorm(row))
}
for (i in length(storms)){
storm <- storms[i]
subset <- hurdat[hurdat$id == storm, ]
#while we can use our function, we can use the record identifier for convenience
#our function only tells us if the storm did or did not make, not when it did
subset <- subset[subset$recordID == " L", ]
#now we can find the row of the max wind speed that made landfall
row <- subset[subset$maxWind == max(subset$maxWind), ]
print(plotStorm(row))
print(plotStormTracks(storm))
}
for (i in length(storms)){
library(tropCyclone)
storm <- storms[i]
subset <- hurdat[hurdat$id == storm, ]
#while we can use our function, we can use the record identifier for convenience
#our function only tells us if the storm did or did not make, not when it did
subset <- subset[subset$recordID == " L", ]
#now we can find the row of the max wind speed that made landfall
row <- subset[subset$maxWind == max(subset$maxWind), ]
print(plotStorm(row))
print(plotStormTracks(storm))
}
library(tropCyclone)
library(randomcoloR)
library(tidyverse)
library(ggplot2)
library(maps)
library(sp)
library(mapdata)
data("hurdat")
plotStormTracks(list_2022)
library(tropCyclone)
plotStormTracks(list_2021)
library(tropCyclone)
library(tropCyclone)
library(tropCyclone)
library(randomcoloR)
library(tidyverse)
library(ggplot2)
library(maps)
library(sp)
library(mapdata)
data("hurdat")
plotStormTracks(list_2022)
subset <- hurdat[hurdat$id %in% storms, ]
View(subset)
for (i in 1:length(storms)){
storm <- storms[i]
subset <- hurdat[hurdat$id == storm, ]
#while we can use our function, we can use the record identifier for convenience
#our function only tells us if the storm did or did not make, not when it did
#now we can find the row of the max wind speed that made landfall
row <- subset[subset$maxWind == max(subset$maxWind), ]
print(cat("Plot for ", storm))
print(plotStorm(row))
print(cat("Plot for ", storm))
print(plotStormTracks(storm))
}
for (i in 1:length(storms)){
storm <- storms[i]
subset <- hurdat[hurdat$id == storm, ]
#while we can use our function, we can use the record identifier for convenience
#our function only tells us if the storm did or did not make, not when it did
#now we can find the row of the max wind speed that made landfall
row <- subset[subset$maxWind == max(subset$maxWind), ]
cat("Plot for ", subset$name[1])
print(plotStorm(row))
cat("Plot for ", subset$name[1])
print(plotStormTracks(storm))
}
#create another function madeLandfall (our package one only takes in stormID), we can change
#to check for each row
madeLandfallRow <- function(row){
#this function will take in a hurricane id, subset it from the best track dataset
#then use the us boundaries (main) given by maps and the sp package
#to see if the points are in the polygon made by the points of the boundaries
us <- map_data("usa")
latNS <- ifelse(subset$hemisphereNS == "N", 1, -1)
longWE <- ifelse(subset$hemisphereWE == "E", 1, -1)
#use the boundaries and point in polygon to see if it made landfall
ans <- sum(point.in.polygon(subset$longitude * longWE, subset$latitude * latNS, us$long, us$lat))
if (ans > 0){
return(TRUE)
}
return(FALSE)
}
#create another function madeLandfall (our package one only takes in stormID), we can change
#to check for each row
madeLandfallRow <- function(row){
#this function will take in a hurricane id, subset it from the best track dataset
#then use the us boundaries (main) given by maps and the sp package
#to see if the points are in the polygon made by the points of the boundaries
us <- map_data("usa")
latNS <- ifelse(row$hemisphereNS == "N", 1, -1)
longWE <- ifelse(row$hemisphereWE == "E", 1, -1)
#use the boundaries and point in polygon to see if it made landfall
ans <- sum(point.in.polygon(row$longitude * longWE, row$latitude * latNS, us$long, us$lat))
if (ans > 0){
return(TRUE)
}
return(FALSE)
}
#use our custom function to check landfall
apply(subset, 1, madeLandfallRow)
subset <- hurdat[hurdat$id == storm, ]
#use our custom function to check landfall
apply(subset, 1, madeLandfallRow)
subset <- hurdat[hurdat$id == storm, ]
#use our custom function to check landfall
landfall <- data.frame()
for (i in 1:nrow(subset)){
if (madeLandfallRow(subset[i,])){
landfall <- rbind(landfill, subset[i,])
}
}
for (i in 1:nrow(subset)){
if (madeLandfallRow(subset[i,])){
landfall <- rbind(landfall, subset[i,])
}
}
View(landfall)
for (i in 1:length(storms)){
storm <- storms[i]
subset <- hurdat[hurdat$id == storm, ]
#use our custom function to check landfall
landfall <- data.frame()
for (i in 1:nrow(subset)){
if (madeLandfallRow(subset[i,])){
landfall <- rbind(landfall, subset[i,])
}
}
#now we can find the row of the max wind speed that made landfall
row <- subset[subset$maxWind == max(subset$maxWind), ]
cat("Plot for", subset$name[1])
print(plotStorm(row))
cat("Plot for", subset$name[1])
print(plotStormTracks(storm))
}
for (i in 1:length(storms)){
storm <- storms[2]
subset <- hurdat[hurdat$id == storm, ]
#use our custom function to check landfall
landfall <- data.frame()
for (i in 1:nrow(subset)){
if (madeLandfallRow(subset[i,])){
landfall <- rbind(landfall, subset[i,])
}
}
#now we can find the row of the max wind speed that made landfall
row <- subset[subset$maxWind == max(subset$maxWind), ]
cat("Plot for", subset$name[1])
print(plotStorm(row))
cat("Plot for", subset$name[1])
print(plotStormTracks(storm))
}
for (i in 1:length(storms)){
storm <- storms[i]
subset <- hurdat[hurdat$id == storm, ]
#use our custom function to check landfall
landfall <- data.frame()
for (j in 1:nrow(subset)){
if (madeLandfallRow(subset[j,])){
landfall <- rbind(landfall, subset[j,])
}
}
#now we can find the row of the max wind speed that made landfall
row <- subset[subset$maxWind == max(subset$maxWind), ]
cat("Plot for", subset$name[1])
print(plotStorm(row))
cat("Plot for", subset$name[1])
print(plotStormTracks(storm))
}
View(subset)
for (i in 1:length(storms)){
storm <- storms[i]
subset <- hurdat[hurdat$id == storm, ]
#use our custom function to check landfall
landfall <- data.frame()
for (j in 1:nrow(subset)){
if (madeLandfallRow(subset[j, ])){
landfall <- rbind(landfall, subset[j, ])
}
}
#now we can find the row of the max wind speed that made landfall
row <- landfall[landfall$maxWind == max(landfall$maxWind), ]
cat("Plot for", subset$name[1])
print(plotStorm(row))
cat("Plot for", subset$name[1])
print(plotStormTracks(storm))
}
for (i in 1:length(storms)){
storm <- storms[i]
subset <- hurdat[hurdat$id == storm, ]
subset <- hurdat[hurdat$id != " L", ]
#use our custom function to check landfall
landfall <- data.frame()
for (j in 1:nrow(subset)){
if (madeLandfallRow(subset[j, ])){
landfall <- rbind(landfall, subset[j, ])
}
}
#now we can find the row of the max wind speed that made landfall
row <- landfall[landfall$maxWind == max(landfall$maxWind), ]
cat("Plot for", subset$name[1])
print(plotStorm(row))
cat("Plot for", subset$name[1])
print(plotStormTracks(storm))
}
for (i in 1:length(storms)){
storm <- storms[i]
subset <- hurdat[hurdat$id == storm, ]
subset <- subset[subset$id != " L", ]
#use our custom function to check landfall
landfall <- data.frame()
for (j in 1:nrow(subset)){
if (madeLandfallRow(subset[j, ])){
landfall <- rbind(landfall, subset[j, ])
}
}
#now we can find the row of the max wind speed that made landfall
row <- landfall[landfall$maxWind == max(landfall$maxWind), ]
cat("Plot for", subset$name[1])
print(plotStorm(row))
cat("Plot for", subset$name[1])
print(plotStormTracks(storm))
}
for (i in 1:length(storms)){
storm <- storms[1]
subset <- hurdat[hurdat$id == storm, ]
subset <- subset[subset$id != " L", ]
#use our custom function to check landfall
landfall <- data.frame()
for (j in 1:nrow(subset)){
if (madeLandfallRow(subset[j, ])){
landfall <- rbind(landfall, subset[j, ])
}
}
#now we can find the row of the max wind speed that made landfall
row <- landfall[landfall$maxWind == max(landfall$maxWind), ]
cat("Plot for", subset$name[1])
print(plotStorm(row))
cat("Plot for", subset$name[1])
print(plotStormTracks(storm))
}
View(subset)
View(landfall)
for (i in 1:length(storms)){
storm <- storms[1]
subset <- hurdat[hurdat$id == storm, ]
subset <- subset[subset$recordID != " L", ]
#use our custom function to check landfall
landfall <- data.frame()
for (j in 1:nrow(subset)){
if (madeLandfallRow(subset[j, ])){
landfall <- rbind(landfall, subset[j, ])
}
}
#now we can find the row of the max wind speed that made landfall
row <- landfall[landfall$maxWind == max(landfall$maxWind), ]
cat("Plot for", subset$name[1])
print(plotStorm(row))
cat("Plot for", subset$name[1])
print(plotStormTracks(storm))
}
for (i in 1:length(storms)){
storm <- storms[i]
subset <- hurdat[hurdat$id == storm, ]
subset <- subset[subset$recordID != " L", ]
#use our custom function to check landfall
landfall <- data.frame()
for (j in 1:nrow(subset)){
if (madeLandfallRow(subset[j, ])){
landfall <- rbind(landfall, subset[j, ])
}
}
#now we can find the row of the max wind speed that made landfall
row <- landfall[landfall$maxWind == max(landfall$maxWind), ]
cat("Plot for", subset$name[1])
print(plotStorm(row))
cat("Plot for", subset$name[1])
print(plotStormTracks(storm))
}
View(subset)
#' contains county and state boundaries and the storm track of the storms
#' in the given vector.
#'
#' @param id storm id found in hurdat$id
#' @return a map containing storm tracks
#'
#' @examples
#' map <- plotStormTracks(c("AL051896", "AL011851"))
#' print(map)
#' @export
plotStormTracks <- function(storm_id){
#states map
states <- map_data("state")
#making hurdat compatible with states (change dataframe to hurdat_2)
hurdat_2 <- hurdat %>%
mutate(longitude = ifelse(hemisphereWE == "E", longitude*1, longitude*-1)) %>%
mutate(latitude = ifelse(hemisphereNS == "N", latitude*1, latitude*-1))
hurdat_2 <- hurdat_2 %>%
mutate(group = 75)
hurdat_2$date <- as.Date(hurdat_2$date, format = "%Y%m%d")
hurdat_2 <- hurdat_2 %>%
rename("Date" = "date")
#base map of United States
p <- ggplot(data=states, aes(x=long, y=lat, group = group)) +
geom_polygon(color = "black", fill = "white") +
#guides(fill= "none") +
ggtitle('Storm Map') +
labs(x = "Longitude", y = "Latitude") +
xlim(-130, 10) +
coord_fixed(1.3)
#loop over all the storms and plot
colorDict <- data.frame()
for(i in 1:length(storm_id)){
p <- p + geom_points(data = hurdat_2 %>%
filter(id == storm_id[i]),
aes(x = longitude, y = latitude, group = group, color = id), size = 2)
colorDict <- rbind(colorDict, c(storm_id[i], randomColor()))
}
colors <- as.character(colorDict[,2])
names(colors) <- as.character(colorDict[,1])
p <- p +
scale_color_manual(name = "Key",
breaks = names(colors),
values = colors) +
theme(legend.text = element_text(size = 6),
legend.key.size = unit(.25,'cm'),
legend.key.width = unit(.25,'cm'),
legend.key.height = unit(.25,'cm'))
return(p)
}
print(plotStormTracks(storm))
#' contains county and state boundaries and the storm track of the storms
#' in the given vector.
#'
#' @param id storm id found in hurdat$id
#' @return a map containing storm tracks
#'
#' @examples
#' map <- plotStormTracks(c("AL051896", "AL011851"))
#' print(map)
#' @export
plotStormTracks <- function(storm_id){
#states map
states <- map_data("state")
#making hurdat compatible with states (change dataframe to hurdat_2)
hurdat_2 <- hurdat %>%
mutate(longitude = ifelse(hemisphereWE == "E", longitude*1, longitude*-1)) %>%
mutate(latitude = ifelse(hemisphereNS == "N", latitude*1, latitude*-1))
hurdat_2 <- hurdat_2 %>%
mutate(group = 75)
hurdat_2$date <- as.Date(hurdat_2$date, format = "%Y%m%d")
hurdat_2 <- hurdat_2 %>%
rename("Date" = "date")
#base map of United States
p <- ggplot(data=states, aes(x=long, y=lat, group = group)) +
geom_polygon(color = "black", fill = "white") +
#guides(fill= "none") +
ggtitle('Storm Map') +
labs(x = "Longitude", y = "Latitude") +
xlim(-130, 10) +
coord_fixed(1.3)
#loop over all the storms and plot
colorDict <- data.frame()
for(i in 1:length(storm_id)){
p <- p + geom_point(data = hurdat_2 %>%
filter(id == storm_id[i]),
aes(x = longitude, y = latitude, group = group, color = id), size = 2)
colorDict <- rbind(colorDict, c(storm_id[i], randomColor()))
}
colors <- as.character(colorDict[,2])
names(colors) <- as.character(colorDict[,1])
p <- p +
scale_color_manual(name = "Key",
breaks = names(colors),
values = colors) +
theme(legend.text = element_text(size = 6),
legend.key.size = unit(.25,'cm'),
legend.key.width = unit(.25,'cm'),
legend.key.height = unit(.25,'cm'))
return(p)
}
print(plotStormTracks(storm))
for (i in 1:length(storms)){
storm <- storms[i]
subset <- hurdat[hurdat$id == storm, ]
subset <- subset[subset$recordID != " L", ]
#use our custom function to check landfall
landfall <- data.frame()
for (j in 1:nrow(subset)){
if (madeLandfallRow(subset[j, ])){
landfall <- rbind(landfall, subset[j, ])
}
}
#now we can find the row of the max wind speed that made landfall
row <- landfall[landfall$maxWind == max(landfall$maxWind), ]
cat("Plot for", subset$name[1])
print(plotStorm(row))
cat("Plot for", subset$name[1])
print(plotStormTracks(storm))
}
plotStormTracks(list_2022)
View(subset)
stormData <- data.frame()
ids <- unique(hurdat$id)
for (i in 1:length(ids)){
subset <- hurdat[hurdat$id == ids[i], ]
row <- c(subset$id[1],
subset$name[1],
max(subset$maxWind),
min(subset$minPressure),
madeLandfall(ids[i]),
getEnergy(ids[i]))
stormData <- rbind(stormData, row)
}
ids[1]
names(stormData) <- c("id", "name", "maxWind", "minPressure", "madeLandfall", "ACE")
View(stormData)
getEnergy("AL092022")
subset <- hurdat[hurdat$id == "AL092022", ]
subset$maxWind
subset$maxWind^2
sum(subset$maxWind^2)
sum(subset$maxWind^2) / 10^4
stormData[1938:1952]
stormData[1938:1952,]
sum(stormData[1937:1952,]$ACE)
sum(as.numeric(stormData[1937:1952,]$ACE))
library(tropCyclone)
